<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Blog - Sridhar Ratnakumar</title><id>https://www.srid.ca/blog</id><updated>2021-01-15</updated><link href="https://www.srid.ca/blog"/><icon>https://www.srid.ca/static/favicon.jpeg</icon><entry><id>https://www.srid.ca/pass</id><title type="text">Pass with GPG</title><updated>2021-01-15</updated><content type="html">&lt;p&gt;&lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt; is a simple &lt;strong&gt;password manager&lt;/strong&gt; that stores passwords in a &lt;a href=&#34;https://wiki.archlinux.org/index.php/GnuPG&#34;&gt;gpg&lt;/a&gt;-encrypted file, not some obscure database. The files can in turn be put on Dropbox, git or any other file management service.&lt;/p&gt;&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; must be installed along &lt;code&gt;gpg&lt;/code&gt;. On &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;nix language-nix&#34;&gt;{
    # Must restart computer, otherwise you may hit this bug:
    # https://github.com/NixOS/nixpkgs/issues/35464#issuecomment-383894005
    programs.gnupg = {
      agent = {
        enable = true;
        enableExtraSocket = true;
        pinentryFlavor = &amp;quot;curses&amp;quot;;
      };
    };
    environment.systemPackages = with pkgs; [
      pass
    ];
}&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using&#34;&gt;Using&lt;/h2&gt;&lt;p&gt;Generate a GPG key&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --full-gen-key&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Initialize the password store, along with git:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;pass init &amp;lt;email&amp;gt;
pass git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Test:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;pass insert test/example.org
pass show test/example.org
pass git push&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;backup-gpg-key-in-keybase&#34;&gt;Backup GPG key in Keybase&lt;/h2&gt;&lt;p&gt;Since I already use &lt;a href=&#34;https://book.keybase.io/docs/files&#34;&gt;keybase&lt;/a&gt;, I store my GPG key securely in &lt;a href=&#34;https://book.keybase.io/docs/files&#34;&gt;kbfs&lt;/a&gt;, and then import it on other computers.&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --export-secret-keys --armor &amp;quot;Sridhar Ratnakumar&amp;quot; &amp;gt; ~/keybase/private/srid/gpg/me.asc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To import from another device:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --import ~/keybase/private/srid/gpg/me.asc
gpg --edit-key srid@srid.ca # and run `trust`&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;android-support&#34;&gt;Android support&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Setup Syncthing (use &lt;code&gt;.git&lt;/code&gt; alias with &lt;code&gt;gitdir: /path/to/.git&lt;/code&gt; as contents in order to exclude the git index from syncing)&lt;/li&gt;&lt;li&gt;Use Android apps: Password Store &amp;amp; OpenKeychain&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;discussions&#34;&gt;Discussions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;2020-01 &lt;a href=&#34;https://lobste.rs/s/emqfkc/what_do_you_use_for_password_management&#34;&gt;Lobste.rs: What do you use for password management?&lt;/a&gt; (User-friendly alternative to &lt;code&gt;pass&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created on &lt;span class=&#34;zettel-link-container errors&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Wiki-link does not refer to any existing zettel&#34;&gt;&lt;a&gt;2021-01-15&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, under &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;linux&#34;&gt;Linux&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</content><link href="https://www.srid.ca/pass"/></entry><entry><id>https://www.srid.ca/x1c7-review</id><title type="text">Thinkpad X1 Carbon Gen 7 review</title><updated>2020-12-21</updated><content type="html">&lt;p&gt;On September 10th, I received my &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;x1c7&#34;&gt;X1C7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; (Gen 7, with 10th gen processor) shipped from Lenovo, and this is a brief review of having used it as my primary computer in the last 3+ months.&lt;/p&gt;&lt;h2 id=&#34;setting-up-linux&#34;&gt;Setting up Linux&lt;/h2&gt;&lt;p&gt;I usually run &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; on my computers, which is what I did on the Carbon. Read the specifics in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Installing NixOS on X1 Carbon Gen 7&#34;&gt;&lt;a href=&#34;x1c7-install&#34;&gt;Installing NixOS on X1 Carbon Gen 7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;h2 id=&#34;what-works&#34;&gt;What works&lt;/h2&gt;&lt;p&gt;Linux kernel 5.9 or later has the best hardware support. Everything including Thunderbolt and fingerprint reader works on Linux. I was surprised in particular to see that 5k resolution worked in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: LG Ultrafine 5k&#34;&gt;&lt;a href=&#34;lg-ultrafine-5k&#34;&gt;LG Ultrafine 5k&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, which is a retina-quality Thunderbolt monitor designed specifically for Macbooks. Compared to previous Thinkpads (such as &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;p71&#34;&gt;P71&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;), the trackpad is as good as that of a Macbook.&lt;/p&gt;&lt;h2 id=&#34;wifi-can-be-unstable&#34;&gt;WiFI can be unstable&lt;/h2&gt;&lt;p&gt;The only annoying issue with the Carbon is that the WiFi card included in my laptop experiences periodic disconnections on Linux. Others have reported the same. See &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: X1C7 WiFi issue&#34;&gt;&lt;a href=&#34;x1c7-wifi&#34;&gt;X1C7 WiFi issue&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for details. In the end, I resorted to using a USB wifi dongle to sidestep this problem.&lt;/p&gt;&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;&lt;p&gt;Performance is good enough for general use and programming, but not ideal for heavy lifting. See &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: X1C7 - satisfactory performance, not for heavy use&#34;&gt;&lt;a href=&#34;x1c7-perf&#34;&gt;X1C7 - satisfactory performance, not for heavy use&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for details.&lt;/p&gt;&lt;h2 id=&#34;battery-life&#34;&gt;Battery Life&lt;/h2&gt;&lt;p&gt;I did not explicitly measure battery life on this laptop with a 4k screen. It looks to be around 6 hours which is more than enough for my use cases. I used the default &lt;a href=&#34;https://github.com/srid/nix-config/blob/48c1c44a7ed52c25c25a19a1771b71a16e174da5/nixos-configuration/x1c7.nix#L11-L13&#34;&gt;nixos-hardware&lt;/a&gt; configuration; and reddit has &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/gc5nn2/x1_extreme_gen_2_4k_uhd_linux_battery_life/fp9ebs5/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;some tips&lt;/a&gt;. A fellow programmer reported &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/hwonb5/x1_carbon_gen_8_4k_battery_life/&#34;&gt;5 hours&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;next-computer&#34;&gt;Next computer&lt;/h2&gt;&lt;p&gt;My next computer, if I choose to buy one in ~3 years, would likely be similar to the X1C7 but with a bit more performance (assuming battery life does not suffer); i.e., if I were to make this decision again, I’d consider Thinkpad X1E or P1&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; - but with integrated graphics (nvidia has poor support on Linux). That said, I still use the Carbon as my primary computer, and use &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;vscode&#34;&gt;VSCode&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; remote to shift much of the develoment heavylifting to the &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;p71&#34;&gt;P71&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; workstation at home.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created on &lt;span class=&#34;zettel-link-container errors&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Wiki-link does not refer to any existing zettel&#34;&gt;&lt;a&gt;2020-12-21&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, on the topic of &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;x1c7&#34;&gt;X1C7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;And if Thunderbolt wasn’t a requirement, I’d easily go for a Thinkpad with AMD processor, such as the T14.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://www.srid.ca/x1c7-review"/></entry><entry><id>https://www.srid.ca/neuron-v1</id><title type="text">Neuron 1.0 released</title><updated>2020-10-08</updated><content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/srid/neuron&#34;&gt;Neuron&lt;/a&gt; is a note-taking tool based on &lt;a href=&#34;https://neuron.zettel.page/zettelkasten.html&#34;&gt;Zettelkasten&lt;/a&gt;, that aims to be &lt;a href=&#34;https://neuron.zettel.page/philosophy.html&#34;&gt;future-proof&lt;/a&gt;, and is optimized for publishing on the web. Version &lt;a href=&#34;https://github.com/srid/neuron/releases/tag/1.0.0.0&#34;&gt;1.0&lt;/a&gt; just got released, with better linking support and many other improvements.&lt;/p&gt;&lt;h2 id=&#34;better-linking&#34;&gt;Better Linking&lt;/h2&gt;&lt;p&gt;Neuron now supports &lt;strong&gt;wiki-links&lt;/strong&gt;, the same syntax used by other software like Zettlr and Obsidian. If your note file is named “neuron-v1.md”, you can link to it using &lt;code&gt;[[neuron-v1]]&lt;/code&gt;. &lt;strong&gt;Regular Markdown links&lt;/strong&gt; also now works as they should – for example, &lt;code&gt;[Neuron v1.0 released](neuron-v1.md)&lt;/code&gt; works exactly like the wiki-link syntax in that it will be recognized as a Zettelkasten connection.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://ipfs.io/ipfs/QmQTopLM4pVnCxEpdMK8LCoy3bvMMPSTmXSx7AuGcreLPf?filename=2020%20cerveau-wikilink-compl.gif&#34; /&gt;&lt;/p&gt;&lt;p&gt;Finally, neuron allows &lt;strong&gt;arbitrary title&lt;/strong&gt; in the note filename. For example, you can start writing a note saved in the file &lt;code&gt;Neuron v1.0 released.md&lt;/code&gt;, and link to it from other notes as &lt;code&gt;[[Neuron v1.0 released]]&lt;/code&gt;. This is called a &lt;a href=&#34;https://neuron.zettel.page/id.html&#34;&gt;title ID&lt;/a&gt;. The title of the note is automatically inferred from this filename, unless of course you explicitly specify one in the body of the note (which title ID obviates).&lt;/p&gt;&lt;h2 id=&#34;git-like-cli&#34;&gt;Git-like CLI&lt;/h2&gt;&lt;p&gt;Previous versions of neuron required you to pass an explicit &lt;code&gt;-d&lt;/code&gt; argument when working on multiple notebooks. This is now obviated by adopting a Git-like CLI interface, wherein neuron will treat the current directory as your notebook without a &lt;code&gt;-d&lt;/code&gt; argument.&lt;/p&gt;&lt;h2 id=&#34;static-binaries&#34;&gt;Static binaries&lt;/h2&gt;&lt;p&gt;Some users do not wish to install Nix, and they &lt;a href=&#34;https://github.com/srid/neuron/issues/183&#34;&gt;requested static binaries&lt;/a&gt;. We now have a static binary&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; for neuron, albeit only for Linux.&lt;/p&gt;&lt;h2 id=&#34;other-improvements&#34;&gt;Other improvements&lt;/h2&gt;&lt;p&gt;Other notable changes include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Inline tags&lt;/strong&gt;: You can inline your tags in your notes, so writing &lt;code&gt;#foo&lt;/code&gt; will automatically tag the note with “foo”.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Better unicode support&lt;/strong&gt;: Now filenames are also unicode-aware. You can write in &lt;code&gt;计算机.md&lt;/code&gt; and then link to it as &lt;code&gt;[[计算机]]&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Custom JavaScript&lt;/strong&gt;: Insert custom JavaScript or head HTML in generated site by adding a &lt;code&gt;head.html&lt;/code&gt; file to your notebook. Users use this to do anything from using a different Math library (KaTeX) to &lt;a href=&#34;https://truong.io/notes/&#34;&gt;adding a navigation bar&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;All backlinks&lt;/strong&gt;: Backlinks panel now shows all backlinks (including folgezettel)&lt;/li&gt;&lt;li&gt;.. and more&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;See &lt;a href=&#34;https://github.com/srid/neuron/releases/tag/1.0.0.0&#34;&gt;the release notes&lt;/a&gt; for a full list of changes.&lt;/p&gt;&lt;h2 id=&#34;cerveau&#34;&gt;Cerveau&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.cerveau.app&#34;&gt;Cerveau&lt;/a&gt;, the web app for neuron, is now officially out of public beta. Since the public beta (announced at &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Cerveau, a future-proof web app for notes&#34;&gt;&lt;a href=&#34;cerveau-announce&#34;&gt;Cerveau, a future-proof web app for notes&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;), the following improvements were made:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;MathJax Live Preview&lt;/strong&gt; (see below)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;WikiLink autocomplete&lt;/strong&gt; (see above)&lt;/li&gt;&lt;li&gt;Tag pages&lt;/li&gt;&lt;li&gt;Other UX improvements&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://ipfs.io/ipfs/QmQRmXGYXmHGJaFTY9brZrpdZdbMvgRWn9bV6DvsVoHapQ?filename=2020%20cerveau-math.gif&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;future-of-neuron&#34;&gt;Future of neuron&lt;/h2&gt;&lt;p&gt;Now that version 1.0 is released, I see two major focus-areas for future-proof open source note-taking – performance &amp;amp; extensibility. &lt;strong&gt;Performance&lt;/strong&gt; is important for especially large Zettelkastens (think - over 50000 notes), and &lt;strong&gt;extensibility&lt;/strong&gt; enables us to keep neuron’s core small and simple, while allowing users to enrich their notebook with interesting features (eg: flash cards, task management, &lt;a href=&#34;https://www.gibney.de/a_syntax_for_self-tracking&#34;&gt;self-tracking&lt;/a&gt;, &lt;a href=&#34;https://github.com/srid/neuron/issues/228#issuecomment-670290253&#34;&gt;Pandoc filters&lt;/a&gt;) without complicating neuron itself.&lt;/p&gt;&lt;p&gt;To achieve this, I’m working on a new (independent) core for neuron, called &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; (named after &lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=Ancient_Egyptian_conception_of_the_soul&amp;amp;oldid=972528324#Ka_(vital_essence)&#34;&gt;the Egyptian concept&lt;/a&gt;) that eventually will supplant rib/shake used currently in neuron. &lt;code&gt;ka&lt;/code&gt; uses Functional Reactive Programming to provide a reactive build pipeline&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; specifically geared towards note-taking, as well as plugin mechanism to customize the behaviour of the application at various stages. In addition to being the new core of neuron, &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; will be an independent app for use, both in the form of web app and GTK+ app; Neuron &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsors&lt;/a&gt; get early access to &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; source code.&lt;/p&gt;&lt;hr /&gt;&lt;div class=&#34;ui message segment&#34;&gt;&lt;p&gt;Special thanks goes to the recent &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsors&lt;/a&gt;, including &lt;a href=&#34;https://github.com/encima&#34;&gt;Chris Gwilliams&lt;/a&gt;, &lt;a href=&#34;https://github.com/edliaw&#34;&gt;Edward Liaw&lt;/a&gt;, &lt;a href=&#34;https://github.com/joelmccracken&#34;&gt;Joel McCracken&lt;/a&gt;, &lt;a href=&#34;https://github.com/amarrella&#34;&gt;Alessandro Marrella&lt;/a&gt;, &lt;a href=&#34;https://github.com/RandolphKahle&#34;&gt;Randolph Kahle&lt;/a&gt;, &lt;a href=&#34;https://github.com/sudeepdino008&#34;&gt;Sudeep&lt;/a&gt;, &lt;a href=&#34;https://github.com/ericmoritz&#34;&gt;Eric Moritz&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;💖&lt;/p&gt;&lt;/div&gt;&lt;p&gt;If you enjoy using neuron and/or Cerveau, and would like to show your appreciation, you might be interested in the &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;GitHub sponsor&lt;/a&gt; goal that will enable the eventual open-sourcing of &lt;a href=&#34;https://www.cerveau.app&#34;&gt;Cerveau&lt;/a&gt;, a full-stack &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; app.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created on &lt;span class=&#34;zettel-link-container errors&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Wiki-link does not refer to any existing zettel&#34;&gt;&lt;a&gt;2020-10-08&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, on the topic of &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The static binaries are built using Nix itself; see &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Building Static Haskell binaries using Nix&#34;&gt;&lt;a href=&#34;nix-haskell-static-binaries&#34;&gt;Building Static Haskell binaries using Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://mpickering.github.io/posts/2020-03-16-ghcide-reflex.html&#34;&gt;this blog post&lt;/a&gt; which details using &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; as build engine in ghcide.&lt;/p&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://www.srid.ca/neuron-v1"/></entry><entry><id>https://www.srid.ca/nix-haskell-static-binaries</id><title type="text">Building Static Haskell binaries using Nix</title><updated>2020-09-29</updated><content type="html">&lt;p&gt;Static binaries are useful to distribute Haskell applications without requiring the user to build it themselves. Fully static Haskell executables are &lt;em&gt;mostly&lt;/em&gt; supported by Nix; see &lt;a href=&#34;https://github.com/NixOS/nixpkgs/issues/43795&#34;&gt;this issue&lt;/a&gt; for details on what’s left.&lt;/p&gt;&lt;p&gt;To get started quickly with building static binaries for your Haskell project,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Nixify your project: write a &lt;code&gt;default.nix&lt;/code&gt; (See &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Nix recipes for Haskellers&#34;&gt;&lt;a href=&#34;haskell-nix&#34;&gt;Nix recipes for Haskellers&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/li&gt;&lt;li&gt;Switch to a fork of &lt;a href=&#34;https://github.com/NixOS/nixpkgs&#34;&gt;nixpkgs&lt;/a&gt; reverting &lt;code&gt;3c7ef6b&lt;/code&gt;.&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;ol&gt;&lt;li&gt;You can try &lt;a href=&#34;https://github.com/srid/nixpkgs/commits/static&#34;&gt;mine&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Write a &lt;code&gt;static.nix&lt;/code&gt; (see below), that invokes this &lt;code&gt;default.nix&lt;/code&gt;, using &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt; to build your app with static linking&lt;/li&gt;&lt;li&gt;Run &lt;code&gt;nix-build static.nix&lt;/code&gt; to produce a static binary under &lt;code&gt;./result/bin&lt;/code&gt;&lt;ol&gt;&lt;li&gt;Expect it to take a long time as it builds everything from source.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&#34;nix language-nix&#34;&gt;let 
  # Assuming we pin nixpkgs using https://github.com/nmattia/niv
  sources = import ./nix/sources.nix;
  # Your nixpkgs fork (see step 2 above)
  nixpkgs = import sources.nixpkgs-fork { };
  # Use `pkgsMusl` for static libraries to link against
  pkgs = nixpkgs.pkgsMusl;
  # This is your Haskell app compiled normally.
  # It&amp;#39;s default.nix takes a `pkgs` argument which we override with `pkgsMusl`
  myapp = import ./default.nix { inherit pkgs; };
  inherit (pkgs.haskell.lib) appendConfigureFlags justStaticExecutables;
in 
  # All that&amp;#39;s left to do is call `justStaticExecutables` to configure Cabal to
  # produce a static executable, as well as add the necessary GHC configure
  # flags to link against static libraries.
  appendConfigureFlags (justStaticExecutables ka)
    [
      &amp;quot;--ghc-option=-optl=-static&amp;quot;
      &amp;quot;--extra-lib-dirs=${pkgs.gmp6.override { withStatic = true; }}/lib&amp;quot;
      &amp;quot;--extra-lib-dirs=${pkgs.zlib.static}/lib&amp;quot;
      &amp;quot;--extra-lib-dirs=${pkgs.libffi.overrideAttrs (old: { dontDisableStatic = true; })}/lib&amp;quot;
      &amp;quot;--extra-lib-dirs=${pkgs.ncurses.override { enableStatic = true; }}/lib&amp;quot;
    ]&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;other-changes-you-might-need-to-make&#34;&gt;Other changes you might need to make&lt;/h2&gt;&lt;p&gt;More complex projects may require additional fixes and workarounds.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If you see the error &lt;code&gt;crtbeginT.o: relocation R_X86_64_32 against hidden symbol &amp;#39;__TMC_END__&amp;#39;&lt;/code&gt;, you might want to add &lt;code&gt;&amp;quot;--disable-shared&amp;quot;&lt;/code&gt; to the configure flags (see above).&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Some tests may fail on musl (eg: &lt;a href=&#34;https://github.com/hslua/hslua/issues/67&#34;&gt;hslua&lt;/a&gt;); disable them using &lt;code&gt;dontCheck&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; in particular, see &lt;a href=&#34;https://github.com/srid/neuron/pull/417/files&#34;&gt;this PR&lt;/a&gt; for the actual changes to support building static binaries on Linux.&lt;/p&gt;&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;&lt;p&gt;macOS does not support fully static binaries. And there is nothing in nixpkgs to build partially static binaries either.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created on &lt;span class=&#34;zettel-link-container errors&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Wiki-link does not refer to any existing zettel&#34;&gt;&lt;a&gt;2020-09-29&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, on the topic of &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;nix&#34;&gt;Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://github.com/NixOS/nixpkgs/issues/85924#issuecomment-619199832&#34;&gt;https://github.com/NixOS/nixpkgs/issues/85924#issuecomment-619199832&lt;/a&gt;&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://logs.nix.samueldr.com/nixos/2019-05-11#2210564;&#34;&gt;this recommendation&lt;/a&gt; by nh2 on IRC. Though, a better solution seems to be to make the GHC bootstrap binary use ncurses6. See &lt;a href=&#34;https://github.com/nh2/static-haskell-nix/issues/99#issuecomment-665400600&#34;&gt;issue &lt;span&gt;&lt;code class=&#34;inline-tag&#34;&gt;#99&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://www.srid.ca/nix-haskell-static-binaries"/></entry><entry><id>https://www.srid.ca/cerveau-announce</id><title type="text">Cerveau, a future-proof web app for notes</title><updated>2020-09-03</updated><content type="html">&lt;p&gt;I’d like to announce the public beta of &lt;a href=&#34;https://www.cerveau.app&#34;&gt;Cerveau&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;, a web app for managing plain-text notes from a GitHub repository. Cerveau integrates directly with &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; which supports &lt;a href=&#34;https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125&#34;&gt;Zettelkasten&lt;/a&gt;-style note-taking in Markdown. This very site you are reading is managed by Neuron and edited in Cerveau, and its Git repo is essentially &lt;a href=&#34;https://github.com/srid/srid.ca&#34;&gt;a directory of Markdown files&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;w-32 ui centered tiny image&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.cerveau.app&#34;&gt;&lt;img src=&#34;https://ipfs.io/ipfs/QmesjhwYQ7jMkZjbwybshJHDvvZTW5Cj36msmeCaTvsUsk?filename=2020%20cerveau-logo.svg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&lt;p&gt;I created the open-source &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; to &lt;a href=&#34;https://en.wiktionary.org/wiki/scratch_one%27s_own_itch&#34;&gt;scratch my own itch&lt;/a&gt;, wherein I wanted to maintain my notes for a lifetime, without being dependent on proprietory formats or systems. I still wasn’t totally satisfied however, because I did not want to give up on the &lt;em&gt;convenience&lt;/em&gt; of managing notes from a web app on my mobile phone. I didn’t want to be tied to a desktop text editor. So, the idea behind Cerveau was born - which began to resolve that dissatifaction without compromising on &lt;a href=&#34;https://neuron.zettel.page/6f0f0bcc.html&#34;&gt;future-proofness&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;&lt;p&gt;All notes are written in Markdown, and stored in a Git repository. Cerveau directly modifies the contents of the repository using &lt;a href=&#34;https://docs.github.com/en/developers/apps&#34;&gt;GitHub Apps API&lt;/a&gt;, while caching the latest revision of the repository on a PostgreSQL database. This allows me to edit my notes from a web browser (as well as from a mobile phone), while keeping the canonical version always on Git all the while allowing edits from elsewhere such as &lt;a href=&#34;https://github.com/felko/neuron-mode#neuron-mode&#34;&gt;Emacs&lt;/a&gt; (i.e., two-way sync).&lt;/p&gt;&lt;h2 id=&#34;technology-used&#34;&gt;Technology used&lt;/h2&gt;&lt;p&gt;Both the backend and frontend components of Cerveau are written in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;. Haskell is my programming language of choice, because it gets a lot of things right (see &lt;a href=&#34;https://wiki.haskell.org/Why_Haskell_matters&#34;&gt;Why Haskell matters&lt;/a&gt;). Software I write in Haskell tends to be reliable; and I can refactor with confidence without being unduly afraid of introducing bugs. This is especially important when dealing with otherwise brittle JavaScript code in frontend code.&lt;/p&gt;&lt;h3 id=&#34;javascript-is-the-new-assembly-language&#34;&gt;JavaScript is the new assembly language&lt;/h3&gt;&lt;p&gt;Cerveau’s frontend too is written in Haskell. Wait, how is that possible? The GHCJS compiler compiles Haskell code to low-level JavaScript for running in the browser. Cerveau uses the &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; library, via the excellent &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;obelisk&#34;&gt;Obelisk&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; framework, which takes care of all the plumbing required to produce such full-stack Haskell apps, so that I as a developer can focus on the &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/31rat9/reflex_practical_functional_reactive_programming/&#34;&gt;FRP&lt;/a&gt; application logic. FRP, and similar models of UI programming, is simpler to write and extend than callback based code. Anybody who writes Elm&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; can attest to that; however unlike Elm or PureScript, GHCJS code can be &lt;em&gt;shared&lt;/em&gt; with the backend. This is what enables Cerveau to directly reuse much of the &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; source code, thus enabling neuron’s core features to work directly on the browser–for example, live HTML preview while editing the note.&lt;/p&gt;&lt;video autoplay muted loop width=&#34;100%&#34;&gt;
  &lt;source src=&#34;https://ipfs.io/ipfs/QmbBG3KKDFFE1VdyJ5FQc7Zkd85zcxXrwA73M9NeAeWkYX?filename=2020%20cerveau-live-preview.webm&#34; type=&#34;video/webm&#34;&gt;
&lt;/video&gt;
&lt;p&gt;The editor widget is based on CodeMirror, via &lt;a href=&#34;https://github.com/Atidot/reflex-codemirror&#34;&gt;reflex-codemirror&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;real-time-communication-via-websockets&#34;&gt;Real-time communication via WebSockets&lt;/h3&gt;&lt;p&gt;WebSockets, via &lt;a href=&#34;https://github.com/obsidiansystems/rhyolite&#34;&gt;rhyolite&lt;/a&gt;, is used for real-time communication between the backend and the frontend; if you have two windows open, then updating a note from one window will have the other window automatically update its view without an explicit refresh (this works even if you are viewing a different note that has the modified note in its backlinks).&lt;/p&gt;&lt;h3 id=&#34;nix&#34;&gt;Nix&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;nix&#34;&gt;Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; is used for both developent and deployment; the production version in particular is deployed to a &lt;a href=&#34;https://m.do.co/c/d19bbb4d33e8&#34;&gt;DigitalOcean&lt;/a&gt; droplet running &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;. Nix makes reproducible development environments easy and possible. A testament to this is how easy it is to contribute to neuron (see &lt;a href=&#34;https://github.com/srid/neuron/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;) - as with one command, &lt;code&gt;nix-shell&lt;/code&gt;, you get the full development enviornment including Haskell IDE support starting from a pristine system with nothing but Nix installed.&lt;/p&gt;&lt;h3 id=&#34;full-stack-haskell-from-prototype-to-production&#34;&gt;Full-Stack Haskell, from Prototype to Production&lt;/h3&gt;&lt;p&gt;Much of these technology choices were informed by my working with the folks from &lt;a href=&#34;https://obsidian.systems&#34;&gt;Obsidian Systems&lt;/a&gt;, whose philosophy is captured in &lt;a href=&#34;https://www.youtube.com/watch?v=riJuXDIUMA0&#34;&gt;this talk&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;ui basic segment centered grid&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/riJuXDIUMA0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;h2 id=&#34;towards-perfecting-future-proof-note-taking&#34;&gt;Towards perfecting &lt;a href=&#34;https://neuron.zettel.page/6f0f0bcc.html&#34;&gt;future-proof&lt;/a&gt; note-taking&lt;/h2&gt;&lt;p&gt;Making &lt;a href=&#34;https://neuron.zettel.page/6f0f0bcc.html&#34;&gt;future-proof&lt;/a&gt; note-taking awesome is my current goal. &lt;a href=&#34;https://github.com/srid/neuron/issues/213&#34;&gt;LSP support&lt;/a&gt;, which facilitates improved note-taking experience in modern editors like VSCode, for Neuron is just one of the several things we can do to move towards that goal.&lt;/p&gt;&lt;p&gt;Where does Cerveau fit in all of this? Cerveau is a “luxury on top”, and a gift to those who help &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsor the open-source Neuron&lt;/a&gt; project to realize the aforementioned goal.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.cerveau.app&#34;&gt;&lt;a href=&#34;http://www.cerveau.app&#34;&gt;www.cerveau.app&lt;/a&gt;&lt;/a&gt; offers a Free account (limited notes) for anybody to try, as well as a Pro account (unlimited notes) for &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;GitHub sponsors&lt;/a&gt; on the “Cerveau Pro Plan” tier or above.&lt;/p&gt;&lt;h2 id=&#34;will-cerveau-be-open-sourced&#34;&gt;Will Cerveau be open-sourced?&lt;/h2&gt;&lt;p&gt;I decided to entertain the idea of eventually open-sourcing Cerveau after &lt;a href=&#34;https://twitter.com/availablegreen/status/1291162883125137408&#34;&gt;a certain level of sponsors&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;whats-next&#34;&gt;What’s next?&lt;/h2&gt;&lt;p&gt;Two major features I’d like to see done myself next are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Auto-completion of links&lt;/strong&gt;: typing &lt;code&gt;[[&lt;/code&gt; in the CodeMirror text editor should bring up an autocomplete popup of note titles. &lt;span class=&#34;ui green text&#34;&gt;Update&lt;/span&gt;: pretty much done&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Auto-save&lt;/strong&gt;: auto-save notes while editing, to provide a Google Docs like feel.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;ui message segment&#34;&gt;&lt;p&gt;Special thanks goes to the recent &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsors&lt;/a&gt;, including &lt;a href=&#34;https://github.com/hmaurer&#34;&gt;Henri Maurer&lt;/a&gt;, &lt;a href=&#34;https://github.com/piannone&#34;&gt;Peter Iannone&lt;/a&gt;, &lt;a href=&#34;https://github.com/zimbatm&#34;&gt;zimbatm&lt;/a&gt;, &lt;a href=&#34;https://github.com/saifelokour&#34;&gt;Saif Elokour&lt;/a&gt;, &lt;a href=&#34;https://github.com/AlexanderThaller&#34;&gt;Alexander Thaller&lt;/a&gt;, &lt;a href=&#34;https://github.com/netstx&#34;&gt;Rafael&lt;/a&gt;, &lt;a href=&#34;https://github.com/codygman&#34;&gt;Cody Goodman&lt;/a&gt;, &lt;a href=&#34;https://github.com/neongreen&#34;&gt;Artyom Kazak&lt;/a&gt; and &lt;a href=&#34;https://github.com/abhas&#34;&gt;Abhas Abhinav&lt;/a&gt;; as well as to Sanjiv Sahayam, Jared Weakly, Alex Chapman and Domen Kožar for feedback on the draft version of this post.&lt;/p&gt;&lt;p&gt;💖&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created on &lt;span class=&#34;zettel-link-container errors&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Wiki-link does not refer to any existing zettel&#34;&gt;&lt;a&gt;2020-09-03&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, on the topic of &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;obelisk&#34;&gt;Obelisk&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;“Cerveau” is prounced with the “eau” sounding like the “o” in “Go”. See &lt;a href=&#34;https://en.wiktionary.org/wiki/cerveau#Pronunciation&#34;&gt;audio playback&lt;/a&gt;.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Incidentally, the paper &lt;a href=&#34;https://futureofcoding.org/papers/comprehensible-frp/comprehensible-frp.pdf&#34;&gt;Explicitly Comprehensible Functional Reactive Programming&lt;/a&gt; compares The Elm Architecture and Reflex Ecosystem’s frameworks.&lt;/p&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://www.srid.ca/cerveau-announce"/></entry></feed>