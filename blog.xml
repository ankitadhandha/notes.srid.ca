<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Blog - Sridhar Ratnakumar</title><id>https://notes.srid.ca/blog</id><updated>2021-04-02</updated><link href="https://notes.srid.ca/blog"/><icon>https://notes.srid.castatic/favicon.jpeg</icon><entry><id>https://notes.srid.ca/fsharp-exploration</id><title type="text">A brief F# exploration</title><updated>2021-04-02</updated><content type="html">&lt;p&gt;I have been writing full-stack web apps in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; using functional reactive programming (&lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;) for 3 years now. Curiosity stuck me as to find out what the FP languages other than Haskell had to offer in this area.&lt;/p&gt;&lt;h2 id=&#34;my-critieria-were&#34;&gt;My critieria were:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Must be a functional programming language&lt;/li&gt;&lt;li&gt;Should compile to JS or Wasm&lt;/li&gt;&lt;li&gt;Must run natively on backend without nodeJS (rules out the likes of &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;purescript&#34;&gt;PureScript&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Haskell’s GHCJS (esp. when used with &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;obelisk&#34;&gt;Obelisk&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;) satisfies all of this, but there is one pain-point: the future of GHCJS and Reflex seems to be in the hands of &lt;em&gt;one small company&lt;/em&gt;, Obsidian Systems.&lt;/p&gt;&lt;p&gt;That &lt;strong&gt;lead me to F#&lt;/strong&gt;, a hybrid FP language (“hybrid” because it supports OOP, which is essential to integrate with the rest of the .NET ecosystem). I’ve documented my learnings here: &lt;a href=&#34;https://srid.github.io/learning-fsharp/&#34;&gt;https://srid.github.io/learning-fsharp/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;what-i-found-impressive&#34;&gt;What I found impressive:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Full access to the entire &lt;strong&gt;.NET&lt;/strong&gt; ecosystem of libraries and frameworks (which is larger than that of Haskell).&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-5-0/#unified-platform-vision&#34;&gt;.NET 5.0&lt;/a&gt; ecosystem is a pleasure to work with (and it works well on Linux with VSCode); and you can create cross-platform apps &lt;a href=&#34;https://github.com/srid/neuron/pull/586&#34;&gt;more straightforwardly&lt;/a&gt; than in Haskell, including on mobile devices.&lt;ul&gt;&lt;li&gt;If I were to start developing &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; today, I probably would use F#.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Microsoft has a great &lt;strong&gt;full-stack&lt;/strong&gt; web development story; and they support WebAssembly (&lt;a href=&#34;https://srid.github.io/learning-fsharp/Blazor&#34;&gt;&lt;code&gt;Blazor&lt;/code&gt;&lt;/a&gt;), including a framework for real-time communication (&lt;code&gt;SignalR&lt;/code&gt;).&lt;ul&gt;&lt;li&gt;In F#, &lt;a href=&#34;https://fsbolero.io/&#34;&gt;Bolero&lt;/a&gt; today is the go-to framework to make use of the above technology.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;I find it reassuring that I can &lt;strong&gt;rely on Microsoft&lt;/strong&gt; to advance the full-stack web development more than one small consultancy (Obsidian Systems) with less than transparent open source development in the Haskell land.&lt;ul&gt;&lt;li&gt;That said, I have some hopes that Tweag’s &lt;a href=&#34;https://github.com/tweag/asterius&#34;&gt;Asterius&lt;/a&gt; catches up, and the community is encouraged to proliferate a whole new ecosystem of full-stack development tools in Haskell not necessarily tied to Reflex.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;some-things-are-better-in-the-haskell-ecosystem-though&#34;&gt;Some things are better in the Haskell ecosystem, though.&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Fast development reload workflow works super well in Haskell, thanks to &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;ghcid&#34;&gt;ghcid&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;. In .NET, you have &lt;code&gt;dotnet watch&lt;/code&gt; - but that recompiles the whole project on every change leading to annoying delay; it made me &lt;a href=&#34;https://github.com/srid/Feather/issues/10&#34;&gt;switch back&lt;/a&gt; to using Haskell for DSL-based static sites, while live-reload is essential to get quick feedback on things like CSS changes.&lt;/li&gt;&lt;li&gt;Having to work with OOP-based .NET libraries (written in C#) can be an annoyance from a pure-FP perspective, though that can be dealt with by wrapping these libraries in a functional layer, and then using that in the F# program.&lt;/li&gt;&lt;li&gt;Overriding dependencies to use a fork in &lt;em&gt;straightforward&lt;/em&gt; manner is virtually impossible. You have to create a local Nuget repo containing the binary of your overriden dependency. Whereas in Haskell world, one can easily use &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;nix&#34;&gt;Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; to use a Git repo (&lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; &lt;a href=&#34;https://github.com/srid/neuron/tree/master/dep&#34;&gt;does this&lt;/a&gt;) as a package dependency.&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;F# will continue to remain in my toolbox&lt;/strong&gt;. If the aforementioned downsides are irrelevant, I might just use it in my next project over Haskell, which is still my go-to language today.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;No, &lt;a href=&#34;https://fsprojects.github.io/Paket/git-dependencies.html&#34;&gt;Paket’s Git feature&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; support this.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://notes.srid.ca/fsharp-exploration"/></entry><entry><id>https://notes.srid.ca/pass</id><title type="text">Pass with GPG</title><updated>2021-01-15</updated><content type="html">&lt;p&gt;&lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt; is a simple &lt;strong&gt;password manager&lt;/strong&gt; that stores passwords in a &lt;a href=&#34;https://wiki.archlinux.org/index.php/GnuPG&#34;&gt;gpg&lt;/a&gt;-encrypted file, not some obscure database. The files can in turn be put on Dropbox, git or any other file management service.&lt;/p&gt;&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; must be installed along &lt;code&gt;gpg&lt;/code&gt;. On &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;:&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;nix language-nix&#34;&gt;{
    # Must restart computer, otherwise you may hit this bug:
    # https://github.com/NixOS/nixpkgs/issues/35464#issuecomment-383894005
    programs.gnupg = {
      agent = {
        enable = true;
        enableExtraSocket = true;
        pinentryFlavor = &amp;quot;curses&amp;quot;;
      };
    };
    environment.systemPackages = with pkgs; [
      pass
    ];
}&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using&#34;&gt;Using&lt;/h2&gt;&lt;p&gt;Generate a GPG key&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --full-gen-key&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Initialize the password store, along with git:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;pass init &amp;lt;email&amp;gt;
pass git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Test:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;pass insert test/example.org
pass show test/example.org
pass git push&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;backup-gpg-key-in-keybase&#34;&gt;Backup GPG key in Keybase&lt;/h2&gt;&lt;p&gt;Since I already use &lt;a href=&#34;https://book.keybase.io/docs/files&#34;&gt;keybase&lt;/a&gt;, I store my GPG key securely in &lt;a href=&#34;https://book.keybase.io/docs/files&#34;&gt;kbfs&lt;/a&gt;, and then import it on other computers.&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --export-secret-keys --armor &amp;quot;Sridhar Ratnakumar&amp;quot; &amp;gt; ~/keybase/private/srid/gpg/me.asc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To import from another device:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;sh language-sh&#34;&gt;gpg --import ~/keybase/private/srid/gpg/me.asc
gpg --edit-key srid@srid.ca # and run `trust`&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;android-support&#34;&gt;Android support&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Setup Syncthing (use &lt;code&gt;.git&lt;/code&gt; alias with &lt;code&gt;gitdir: /path/to/.git&lt;/code&gt; as contents in order to exclude the git index from syncing)&lt;/li&gt;&lt;li&gt;Use Android apps: Password Store &amp;amp; OpenKeychain&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;discussions&#34;&gt;Discussions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;2020-01 &lt;a href=&#34;https://lobste.rs/s/emqfkc/what_do_you_use_for_password_management&#34;&gt;Lobste.rs: What do you use for password management?&lt;/a&gt; (User-friendly alternative to &lt;code&gt;pass&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created under &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;linux&#34;&gt;Linux&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;On non-NixOS Linuxes, you may want to use the native package, as home-manager’s &lt;a href=&#34;https://github.com/nix-community/home-manager/issues/1871&#34;&gt;shell completion is broken&lt;/a&gt;.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://notes.srid.ca/pass"/></entry><entry><id>https://notes.srid.ca/x1c7-review</id><title type="text">Thinkpad X1 Carbon Gen 7 review</title><updated>2020-12-21</updated><content type="html">&lt;p&gt;On September 10th, I received my &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;x1c7&#34;&gt;X1C7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; (Gen 7, with 10th gen processor) shipped from Lenovo, and this is a brief review of having used it as my primary computer in the last 3+ months.&lt;/p&gt;&lt;h2 id=&#34;setting-up-linux&#34;&gt;Setting up Linux&lt;/h2&gt;&lt;p&gt;I usually run &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;nixos&#34;&gt;NixOS&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; on my computers, which is what I did on the Carbon. Read the specifics in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Installing NixOS on X1 Carbon Gen 7&#34;&gt;&lt;a href=&#34;x1c7-install&#34;&gt;Installing NixOS on X1 Carbon Gen 7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;h2 id=&#34;what-works&#34;&gt;What works&lt;/h2&gt;&lt;p&gt;Linux kernel 5.9 or later has the best hardware support. Everything including Thunderbolt and fingerprint reader works on Linux. I was surprised in particular to see that 5k resolution worked in &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: LG Ultrafine 5k&#34;&gt;&lt;a href=&#34;lg-ultrafine-5k&#34;&gt;LG Ultrafine 5k&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, which is a retina-quality Thunderbolt monitor designed specifically for Macbooks. Compared to previous Thinkpads (such as &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;p71&#34;&gt;P71&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;), the trackpad is as good as that of a Macbook.&lt;/p&gt;&lt;h2 id=&#34;wifi-can-be-unstable&#34;&gt;WiFI can be unstable&lt;/h2&gt;&lt;p&gt;The only annoying issue with the Carbon is that the WiFi card included in my laptop experiences periodic disconnections on Linux. Others have reported the same. See &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: X1C7 WiFi issue&#34;&gt;&lt;a href=&#34;x1c7-wifi&#34;&gt;X1C7 WiFi issue&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for details. In the end, I resorted to using a USB wifi dongle to sidestep this problem.&lt;/p&gt;&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;&lt;p&gt;Performance is good enough for general use and programming, but not ideal for heavy lifting. See &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: X1C7 - satisfactory performance, not for heavy use&#34;&gt;&lt;a href=&#34;x1c7-perf&#34;&gt;X1C7 - satisfactory performance, not for heavy use&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; for details.&lt;/p&gt;&lt;h2 id=&#34;battery-life&#34;&gt;Battery Life&lt;/h2&gt;&lt;p&gt;I did not explicitly measure battery life on this laptop with a 4k screen. It looks to be around 6 hours which is more than enough for my use cases. I used the default &lt;a href=&#34;https://github.com/srid/nix-config/blob/48c1c44a7ed52c25c25a19a1771b71a16e174da5/nixos-configuration/x1c7.nix#L11-L13&#34;&gt;nixos-hardware&lt;/a&gt; configuration; and reddit has &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/gc5nn2/x1_extreme_gen_2_4k_uhd_linux_battery_life/fp9ebs5/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;some tips&lt;/a&gt;. A fellow programmer reported &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/hwonb5/x1_carbon_gen_8_4k_battery_life/&#34;&gt;5 hours&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;next-computer&#34;&gt;Next computer&lt;/h2&gt;&lt;p&gt;My next computer, if I choose to buy one in ~3 years, would likely be similar to the X1C7 but with a bit more performance (assuming battery life does not suffer); i.e., if I were to make this decision again, I’d consider Thinkpad X1E or P1&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; - but with integrated graphics (nvidia has poor support on Linux). That said, I still use the Carbon as my primary computer, and use &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;vscode&#34;&gt;VSCode&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; remote to shift much of the develoment heavylifting to the &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;a href=&#34;p71&#34;&gt;P71&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; workstation at home.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created under &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;x1c7&#34;&gt;X1C7&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;And if Thunderbolt wasn’t a requirement, I’d easily go for a Thinkpad with AMD processor, such as the T14.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://notes.srid.ca/x1c7-review"/></entry><entry><id>https://notes.srid.ca/haskell-new-project</id><title type="text">Creating a new Haskell project with IDE support using Nix</title><updated>2020-11-16</updated><content type="html">&lt;p&gt;I create new &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; libraries and applications using &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;nix&#34;&gt;Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;, along with IDE support in &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;vscode&#34;&gt;VSCode&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; as follows.&lt;/p&gt;&lt;p&gt;First, install &lt;a href=&#34;https://github.com/obsidiansystems/nix-thunk&#34;&gt;nix-thunk&lt;/a&gt; (alternatively, you may use niv or flakes).&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;bash language-bash&#34;&gt;# Initialize project layout using cabal
mkdir mypkg &amp;amp;&amp;amp; cd mypkg
# Note: Pass --lib, --exe or --libandexe as appropriate
nix-shell -p cabal-install -p ghc --run \
  &amp;quot;cabal init --cabal-version=3.0 -m -l BSD3 --lib -p mypkg&amp;quot;

# Add to git
git init &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Initial commit&amp;quot;

# Remove, or update, version constraint on base to match compiler
vim *.cabal  # and remove version constraint on `base`

# Pin nixpkgs, etc
# You might want to pass --rev, using the value from status.nixos.org
nix-thunk create \
  https://github.com/nixos/nixpkgs.git dep/nixpkgs
nix-thunk create \
  https://github.com/hercules-ci/gitignore.nix.git dep/gitignoresrc

# Write template default.nix
cat &amp;lt;&amp;lt; EOF &amp;gt; default.nix
{ pkgs ? import ./dep/nixpkgs {} }:
let 
  inherit (import ./dep/gitignoresrc { inherit (pkgs) lib; }) gitignoreSource;
in 
  pkgs.haskellPackages.developPackage {
    name = &amp;quot;mypkg&amp;quot;;
    root = gitignoreSource ./.;
    modifier = drv:
      pkgs.haskell.lib.addBuildTools drv (with pkgs.haskellPackages;
        [ cabal-install
          cabal-fmt
          ghcid
          haskell-language-server
        ]);
  }
EOF

# Test your changes
nix-build
nix-shell --run &amp;#39;cabal-fmt -i *.cabal&amp;#39;  # Formats your cabal file
nix-shell --run &amp;#39;ghcid -T :main&amp;#39;

# Create .gitignore and commit
echo -e &amp;quot;dist-newstyle\nresult&amp;quot; &amp;gt; .gitignore
git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Nixify&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To enable IDE support,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Copy &lt;a href=&#34;https://github.com/srid/reflex-stone/tree/master/.vscode&#34;&gt;.vscode template&lt;/a&gt; to &lt;code&gt;./.vscode&lt;/code&gt; (note: settings.json should point to default.nix instead of shell.nix)&lt;/li&gt;&lt;li&gt;Add the &lt;a href=&#34;https://github.com/haskell/haskell-language-server#configuring-your-project-build&#34;&gt;appropriate hie.yaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Test your configuration by running &lt;code&gt;nix-shell --run haskell-language-server&lt;/code&gt; (it should succeed with module-level reports)&lt;/li&gt;&lt;li&gt;Open the folder in VSCode and follow the instructions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Other things you might want to do:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use &lt;code&gt;relude&lt;/code&gt; as Prelude&lt;/li&gt;&lt;li&gt;Enable some &lt;code&gt;default-extensions&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Enable &lt;a href=&#34;https://kowainik.github.io/posts/2019-02-06-style-guide#ghc-options&#34;&gt;sensible warnings&lt;/a&gt; in &lt;code&gt;ghc-options&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;input disabled=&#34;True&#34; type=&#34;checkbox&#34; /&gt;Hoogle (&lt;a href=&#34;https://www.reddit.com/r/haskell/comments/k2htfz/template_github_project_using_nix_with_haddock/&#34;&gt;cf&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;input disabled=&#34;True&#34; type=&#34;checkbox&#34; /&gt;GitHub CI action workflow&lt;/li&gt;&lt;li&gt;&lt;input disabled=&#34;True&#34; type=&#34;checkbox&#34; /&gt;Consider haskell.nix (&lt;a href=&#34;https://github.com/srid/g/pull/1&#34;&gt;example change&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;</content><link href="https://notes.srid.ca/haskell-new-project"/></entry><entry><id>https://notes.srid.ca/neuron-v1</id><title type="text">Neuron 1.0 released</title><updated>2020-10-08</updated><content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/srid/neuron&#34;&gt;Neuron&lt;/a&gt; is a note-taking tool based on &lt;a href=&#34;https://neuron.zettel.page/zettelkasten.html&#34;&gt;Zettelkasten&lt;/a&gt;, that aims to be &lt;a href=&#34;https://neuron.zettel.page/philosophy.html&#34;&gt;future-proof&lt;/a&gt;, and is optimized for publishing on the web. Version &lt;a href=&#34;https://github.com/srid/neuron/releases/tag/1.0.0.0&#34;&gt;1.0&lt;/a&gt; just got released, with better linking support and many other improvements.&lt;/p&gt;&lt;h2 id=&#34;better-linking&#34;&gt;Better Linking&lt;/h2&gt;&lt;p&gt;Neuron now supports &lt;strong&gt;wiki-links&lt;/strong&gt;, the same syntax used by other software like Zettlr and Obsidian. If your note file is named “neuron-v1.md”, you can link to it using &lt;code&gt;[[neuron-v1]]&lt;/code&gt;. &lt;strong&gt;Regular Markdown links&lt;/strong&gt; also now works as they should – for example, &lt;code&gt;[Neuron v1.0 released](neuron-v1.md)&lt;/code&gt; works exactly like the wiki-link syntax in that it will be recognized as a Zettelkasten connection.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://ipfs.io/ipfs/QmQTopLM4pVnCxEpdMK8LCoy3bvMMPSTmXSx7AuGcreLPf?filename=2020%20cerveau-wikilink-compl.gif&#34; /&gt;&lt;/p&gt;&lt;p&gt;Finally, neuron allows &lt;strong&gt;arbitrary title&lt;/strong&gt; in the note filename. For example, you can start writing a note saved in the file &lt;code&gt;Neuron v1.0 released.md&lt;/code&gt;, and link to it from other notes as &lt;code&gt;[[Neuron v1.0 released]]&lt;/code&gt;. This is called a &lt;a href=&#34;https://neuron.zettel.page/id.html&#34;&gt;title ID&lt;/a&gt;. The title of the note is automatically inferred from this filename, unless of course you explicitly specify one in the body of the note (which title ID obviates).&lt;/p&gt;&lt;h2 id=&#34;git-like-cli&#34;&gt;Git-like CLI&lt;/h2&gt;&lt;p&gt;Previous versions of neuron required you to pass an explicit &lt;code&gt;-d&lt;/code&gt; argument when working on multiple notebooks. This is now obviated by adopting a Git-like CLI interface, wherein neuron will treat the current directory as your notebook without a &lt;code&gt;-d&lt;/code&gt; argument.&lt;/p&gt;&lt;h2 id=&#34;static-binaries&#34;&gt;Static binaries&lt;/h2&gt;&lt;p&gt;Some users do not wish to install Nix, and they &lt;a href=&#34;https://github.com/srid/neuron/issues/183&#34;&gt;requested static binaries&lt;/a&gt;. We now have a static binary&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; for neuron, albeit only for Linux.&lt;/p&gt;&lt;h2 id=&#34;other-improvements&#34;&gt;Other improvements&lt;/h2&gt;&lt;p&gt;Other notable changes include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Inline tags&lt;/strong&gt;: You can inline your tags in your notes, so writing &lt;code&gt;#foo&lt;/code&gt; will automatically tag the note with “foo”.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Better unicode support&lt;/strong&gt;: Now filenames are also unicode-aware. You can write in &lt;code&gt;计算机.md&lt;/code&gt; and then link to it as &lt;code&gt;[[计算机]]&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Custom JavaScript&lt;/strong&gt;: Insert custom JavaScript or head HTML in generated site by adding a &lt;code&gt;head.html&lt;/code&gt; file to your notebook. Users use this to do anything from using a different Math library (KaTeX) to &lt;a href=&#34;https://truong.io/notes/&#34;&gt;adding a navigation bar&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;All backlinks&lt;/strong&gt;: Backlinks panel now shows all backlinks (including folgezettel)&lt;/li&gt;&lt;li&gt;.. and more&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;See &lt;a href=&#34;https://github.com/srid/neuron/releases/tag/1.0.0.0&#34;&gt;the release notes&lt;/a&gt; for a full list of changes.&lt;/p&gt;&lt;h2 id=&#34;cerveau&#34;&gt;Cerveau&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.cerveau.app&#34;&gt;Cerveau&lt;/a&gt;, the web app for neuron, is now officially out of public beta. Since the public beta (announced at &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Cerveau, a future-proof web app for notes&#34;&gt;&lt;a href=&#34;cerveau-announce&#34;&gt;Cerveau, a future-proof web app for notes&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;), the following improvements were made:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;MathJax Live Preview&lt;/strong&gt; (see below)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;WikiLink autocomplete&lt;/strong&gt; (see above)&lt;/li&gt;&lt;li&gt;Tag pages&lt;/li&gt;&lt;li&gt;Other UX improvements&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://ipfs.io/ipfs/QmQRmXGYXmHGJaFTY9brZrpdZdbMvgRWn9bV6DvsVoHapQ?filename=2020%20cerveau-math.gif&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;future-of-neuron&#34;&gt;Future of neuron&lt;/h2&gt;&lt;p&gt;Now that version 1.0 is released, I see two major focus-areas for future-proof open source note-taking – performance &amp;amp; extensibility. &lt;strong&gt;Performance&lt;/strong&gt; is important for especially large Zettelkastens (think - over 50000 notes), and &lt;strong&gt;extensibility&lt;/strong&gt; enables us to keep neuron’s core small and simple, while allowing users to enrich their notebook with interesting features (eg: flash cards, task management, &lt;a href=&#34;https://www.gibney.de/a_syntax_for_self-tracking&#34;&gt;self-tracking&lt;/a&gt;, &lt;a href=&#34;https://github.com/srid/neuron/issues/228#issuecomment-670290253&#34;&gt;Pandoc filters&lt;/a&gt;) without complicating neuron itself.&lt;/p&gt;&lt;p&gt;To achieve this, I’m working on a new (independent) core for neuron, called &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; (named after &lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=Ancient_Egyptian_conception_of_the_soul&amp;amp;oldid=972528324#Ka_(vital_essence)&#34;&gt;the Egyptian concept&lt;/a&gt;) that eventually will supplant rib/shake used currently in neuron. &lt;code&gt;ka&lt;/code&gt; uses Functional Reactive Programming to provide a reactive build pipeline&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; specifically geared towards note-taking, as well as plugin mechanism to customize the behaviour of the application at various stages. In addition to being the new core of neuron, &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; will be an independent app for use, both in the form of web app and GTK+ app; Neuron &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsors&lt;/a&gt; get early access to &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: ka Project&#34;&gt;&lt;a href=&#34;ka&#34;&gt;ka Project&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; source code.&lt;/p&gt;&lt;hr /&gt;&lt;div class=&#34;ui message segment&#34;&gt;&lt;p&gt;Special thanks goes to the recent &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;sponsors&lt;/a&gt;, including &lt;a href=&#34;https://github.com/encima&#34;&gt;Chris Gwilliams&lt;/a&gt;, &lt;a href=&#34;https://github.com/edliaw&#34;&gt;Edward Liaw&lt;/a&gt;, &lt;a href=&#34;https://github.com/joelmccracken&#34;&gt;Joel McCracken&lt;/a&gt;, &lt;a href=&#34;https://github.com/amarrella&#34;&gt;Alessandro Marrella&lt;/a&gt;, &lt;a href=&#34;https://github.com/RandolphKahle&#34;&gt;Randolph Kahle&lt;/a&gt;, &lt;a href=&#34;https://github.com/sudeepdino008&#34;&gt;Sudeep&lt;/a&gt;, &lt;a href=&#34;https://github.com/ericmoritz&#34;&gt;Eric Moritz&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;💖&lt;/p&gt;&lt;/div&gt;&lt;p&gt;If you enjoy using neuron and/or Cerveau, and would like to show your appreciation, you might be interested in the &lt;a href=&#34;https://github.com/sponsors/srid&#34;&gt;GitHub sponsor&lt;/a&gt; goal that will enable the eventual open-sourcing of &lt;a href=&#34;https://www.cerveau.app&#34;&gt;Cerveau&lt;/a&gt;, a full-stack &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; app.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;blog&#34;&gt;Blog&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; post created under &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;neuron&#34;&gt;Neuron&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;The static binaries are built using Nix itself; see &lt;span class=&#34;zettel-link-container cf&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;Zettel: Building Static Haskell binaries using Nix&#34;&gt;&lt;a href=&#34;nix-haskell-static-binaries&#34;&gt;Building Static Haskell binaries using Nix&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://mpickering.github.io/posts/2020-03-16-ghcide-reflex.html&#34;&gt;this blog post&lt;/a&gt; which details using &lt;span class=&#34;zettel-link-container folgeinv&#34;&gt;&lt;span class=&#34;zettel-link&#34;&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;a href=&#34;reflex-frp&#34;&gt;Reflex-FRP&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; as build engine in ghcide.&lt;/p&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://notes.srid.ca/neuron-v1"/></entry></feed>